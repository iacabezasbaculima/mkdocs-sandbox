name: Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: Whether to run semantic-release in `dry-run` mode
        type: boolean
        required: true
        default: false
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'CHANGELOG.md'

permissions:
  contents: read

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    concurrency:
      group: release
    outputs:
      new_release_version: ${{ steps.release.outputs.new_release_version }}
      new_release_git_head: ${{ steps.release.outputs.new_release_git_head }}
      new_release_published: ${{ steps.release.outputs.new_release_published }}
    steps:
      - name: Checkout
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Release
        id: release
        uses: cycjimmy/semantic-release-action@cb425203a562475bca039ba4dbf90c7f9ac790f4 # v4.1.0
        with:
          semantic_version: 23.0.2
          dry_run: ${{ inputs.dry_run || false }}
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
            conventional-changelog-conventionalcommits@7.0.2
        env:
          DEBUG: semantic-release:*
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
      - name: Print outputs
        shell: bash
        run: |
          echo "published: ${{ steps.release.outputs.new_release_published}}"
          echo "new head: ${{ steps.release.outputs.new_release_git_head}}"
          echo "new tag: ${{ steps.release.outputs.new_release_git_tag}}"
          echo "new version: ${{ steps.release.outputs.new_release_version}}"
          echo "last head: ${{ steps.release.outputs.last_release_git_head}}"
          echo "last tag: ${{ steps.release.outputs.last_release_git_tag}}"
          echo "last version: ${{ steps.release.outputs.last_release_version}}"
          
      - name: Update major version tag
        if: steps.release.outputs.new_release_published == 'true'
        shell: bash
        run: |
          MAJOR_VERSION="${{ steps.release.outputs.new_release_major_version}}"
          if [[ "$MAJOR_VERSION" -eq 0 ]]; then
            # avoid creating a major tag v0
            MAJOR_VERSION="$((MAJOR_VERSION + 1))"
          fi
          NEW_HEAD_COMMIT="${{ steps.release.outputs.new_release_git_head}}"
          if git rev-parse "v$MAJOR_VERSION" >/dev/null 2>&1; then
            echo "git tag exists, updating..."
            git tag -f "v$MAJOR_VERSION" "$NEW_HEAD_COMMIT"
            git push origin -d "v$MAJOR_VERSION"
            git push origin "v$MAJOR_VERSION"
          else
            echo "git tag does not exist, creating..."
            git tag "v$MAJOR_VERSION" "$NEW_HEAD_COMMIT"
            git push origin "v$MAJOR_VERSION"
          fi

  publish-docs:
    if: ${{ needs.release.outputs.new_release_published }}
    needs: release
    permissions:
      contents: write
      pages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/self-docs-publish.yml
    with:
      version: ${{ needs.release.outputs.new_release_version }}
      git_ref: ${{ needs.release.outputs.new_release_git_head }}
